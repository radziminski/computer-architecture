x86 projects
Write a program containing two source files: main program written in C and assembly module callable from
C. The C declaration of an assembly routine is given for each project task. Use NASM assembler
(nasm.sf.net) to assemble the assembly module. Use C compiler driver to compile C module and link it with
the output of assembler. The C program should use command line arguments to supply the parameters to an
assembly routine and perform all I/O operations. No system functions nor C library functions should be
called from assembly code. Arguments for bit manipulation routines should be entered in hexadecimal.
Routines processing .BMP files may receive as arguments either the pointer to the whole .BMP file image in
memory or the pointer to bitmap and its sizes read by main program. The routines should correctly process
images of any sizes unless stated otherwise.
The program should be implemented in two versions: 32-bit, following the calling convention described in
abi386-4.pdf and 64-bit, conforming to 64-bit Unix calling convention (document available from
www.amd64.org). Both conventions are also described in a document available from www.agner.org. While
converting from x86 to x86-64, try to remove memory variables if they were used in x86 version and place
the variables in extra processor's registers.
Maximum score for (any) single version is 6 points. The second version is worth 2 points.

Avoid the sequences of consecutive branches, esp. conditional branches followed by unconditional ones
(unless necessary).
Any attempt to submit the project explicitly violating the calling convention will be punished by subtracting
one point from the final score.

Make a program that flips the 2 bit bmp image diagonally, so that (x, y) pixel becomes (y, x) pixel. 